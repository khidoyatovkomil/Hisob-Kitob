import logging
import sqlite3
import asyncio
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN not found in environment variables")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AddExpenseState(StatesGroup):
    waiting_for_amount_and_category = State()

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
def format_number(number):
    return "{:,.0f}".format(number).replace(",", ".")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("finance.db")
    cursor = conn.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS expenses (
                        id INTEGER PRIMARY KEY,
                        user_id INTEGER,
                        amount REAL,
                        category TEXT,
                        date TEXT)""")

    cursor.execute("""CREATE TABLE IF NOT EXISTS action_history (
                        id INTEGER PRIMARY KEY,
                        user_id INTEGER,
                        details TEXT,
                        date TEXT)""")

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
def add_expense(user_id, amount, category, date):
    conn = sqlite3.connect("finance.db")
    cursor = conn.cursor()
    
    cursor.execute("INSERT INTO expenses (user_id, amount, category, date) VALUES (?, ?, ?, ?)", 
                   (user_id, amount, category, date))
    
    cursor.execute("INSERT INTO action_history (user_id, details, date) VALUES (?, ?, ?)",
                   (user_id, f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥: {amount} —Å—É–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}", date))
    
    cursor.execute("DELETE FROM action_history WHERE id NOT IN (SELECT id FROM action_history WHERE user_id = ? ORDER BY date DESC LIMIT 5)", (user_id,))
    
    conn.commit()
    conn.close()

def get_today_expenses(user_id):
    conn = sqlite3.connect("finance.db")
    cursor = conn.cursor()
    
    today = datetime.now().strftime("%Y-%m-%d")
    cursor.execute("SELECT SUM(amount) FROM expenses WHERE user_id = ? AND date LIKE ?", (user_id, f"{today}%"))
    total_amount = cursor.fetchone()[0] or 0
    
    cursor.execute("SELECT category, SUM(amount) FROM expenses WHERE user_id = ? AND date LIKE ? GROUP BY category", 
                  (user_id, f"{today}%"))
    details = cursor.fetchall()
    
    conn.close()
    return total_amount, details

def get_stats(user_id):
    conn = sqlite3.connect("finance.db")
    cursor = conn.cursor()
    
    cursor.execute("SELECT category, SUM(amount) FROM expenses WHERE user_id = ? GROUP BY category", (user_id,))
    stats = cursor.fetchall()
    
    cursor.execute("SELECT SUM(amount) FROM expenses WHERE user_id = ?", (user_id,))
    total_amount = cursor.fetchone()[0] or 0
    
    cursor.execute("""
        SELECT strftime('%Y-%m', date) AS month, SUM(amount)
        FROM expenses
        WHERE user_id = ?
        GROUP BY month
        ORDER BY month DESC
    """, (user_id,))
    monthly_stats = cursor.fetchall()
    
    conn.close()
    return stats, total_amount, monthly_stats

def delete_last_expense(user_id):
    conn = sqlite3.connect("finance.db")
    cursor = conn.cursor()
    
    cursor.execute("SELECT id, amount, category FROM expenses WHERE user_id = ? ORDER BY date DESC LIMIT 1", (user_id,))
    last_expense = cursor.fetchone()
    
    if last_expense:
        expense_id, amount, category = last_expense
        cursor.execute("DELETE FROM expenses WHERE id = ?", (expense_id,))
        cursor.execute("INSERT INTO action_history (user_id, details, date) VALUES (?, ?, ?)",
                      (user_id, f"–£–¥–∞–ª—ë–Ω —Ä–∞—Å—Ö–æ–¥: {amount} —Å—É–º –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}", datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        cursor.execute("DELETE FROM action_history WHERE id NOT IN (SELECT id FROM action_history WHERE user_id = ? ORDER BY date DESC LIMIT 5)", (user_id,))
        conn.commit()
        conn.close()
        return amount, category
    
    conn.close()
    return None, None

def get_all_users():
    conn = sqlite3.connect("finance.db")
    cursor = conn.cursor()
    
    cursor.execute("SELECT DISTINCT user_id FROM expenses")
    users = [user[0] for user in cursor.fetchall()]
    
    conn.close()
    return users

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def create_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/stats"), KeyboardButton(text="/today")],
            [KeyboardButton(text="/delete_last"), KeyboardButton(text="/help")]
        ],
        resize_keyboard=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ üí∞\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15000 –ø—Ä–æ–¥—É–∫—Ç—ã\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º.",
        reply_markup=create_main_keyboard()
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = [
        "üìå <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>",
        "",
        "1. <b>–ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥</b> (–±–µ–∑ –∫–æ–º–∞–Ω–¥):",
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: <code>–°–£–ú–ú–ê –ö–ê–¢–ï–ì–û–†–ò–Ø</code>",
        "–ü—Ä–∏–º–µ—Ä: <code>15000 –ø—Ä–æ–¥—É–∫—Ç—ã</code>",
        "",
        "2. <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>",
        "/stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤",
        "/today - —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        "/delete_last - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥",
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    ]
    await message.answer("\n".join(help_text), parse_mode="HTML")

@dp.message(Command("today"))
async def today_expenses(message: types.Message):
    try:
        total, details = get_today_expenses(message.from_user.id)
        today_date = datetime.now().strftime("%d.%m.%Y")
        
        if total > 0:
            response = [f"üí∞ <b>–†–∞—Å—Ö–æ–¥—ã –Ω–∞ {today_date}:</b>"]
            for category, amount in details:
                response.append(f"- {category}: {format_number(amount)} —Å—É–º")
            response.append(f"\n<b>–ò—Ç–æ–≥–æ:</b> {format_number(total)} —Å—É–º")
        else:
            response = [f"üí∞ <b>–†–∞—Å—Ö–æ–¥—ã –Ω–∞ {today_date}:</b> –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤"]
            
        await message.answer("\n".join(response), parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

@dp.message(Command("stats"))
async def show_stats(message: types.Message):
    try:
        stats, total, monthly = get_stats(message.from_user.id)
        response = ["üìä <b>–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã:</b>"]
        
        if stats:
            response.extend(f"- {cat}: {format_number(amt)} —Å—É–º" for cat, amt in stats)
            response.append(f"\nüí∏ <b>–í—Å–µ–≥–æ:</b> {format_number(total)} —Å—É–º")
            response.append("\nüìÖ <b>–ü–æ –º–µ—Å—è—Ü–∞–º:</b>")
            response.extend(f"- {month}: {format_number(amt)} —Å—É–º" for month, amt in monthly)
        else:
            response.append("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö")
            
        await message.answer("\n".join(response), parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.message(Command("delete_last"))
async def delete_last_expense_handler(message: types.Message):
    try:
        amount, category = delete_last_expense(message.from_user.id)
        if amount:
            await message.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {format_number(amount)} —Å—É–º (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
        else:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞")

@dp.message(F.text & ~F.text.startswith("/"))
async def handle_expense_input(message: types.Message):
    try:
        parts = message.text.split(maxsplit=1)
        amount = float(parts[0].replace(',', '.'))
        category = parts[1].lower() if len(parts) > 1 else "–¥—Ä—É–≥–æ–µ"
        
        add_expense(message.from_user.id, amount, category, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {format_number(amount)} —Å—É–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´{category}¬ª")
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ:\n<code>–°–£–ú–ú–ê –ö–ê–¢–ï–ì–û–†–ò–Ø</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>10000 –µ–¥–∞</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def send_daily_reports():
    while True:
        now = datetime.utcnow()
        if now.hour == 18 and now.minute == 59:  # 23:59 Tashkent time (UTC+5)
            for user_id in get_all_users():
                total, details = get_today_expenses(user_id)
                if total > 0:
                    today_date = (now + timedelta(hours=5)).strftime("%d.%m.%Y")
                    response = [f"üïí <b>–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ {today_date}:</b>"]
                    response.extend(f"- {cat}: {format_number(amt)} —Å—É–º" for cat, amt in details)
                    response.append(f"\n<b>–ò—Ç–æ–≥–æ:</b> {format_number(total)} —Å—É–º")
                    try:
                        await bot.send_message(user_id, "\n".join(response), parse_mode="HTML")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await asyncio.sleep(60)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    asyncio.create_task(send_daily_reports())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")